generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  role      Role     @default(USER)
  username  String   @unique
  totalVotes Int     @default(0)
  salaries  Salary[]
  votes     Vote[]
  emailVerified    Boolean   @default(false)
  verificationToken String?  @unique
  verificationTokenExpiry DateTime?
  resetToken          String?   @unique
  resetTokenExpiry    DateTime?
  contactToken          String?   @unique
  contactTokenExpiry    DateTime?
  anonymousMessages    AnonymousMessage[]
}

model Salary {
  id          String   @id @default(cuid())
  amount      Int
  position    String
  company     String
  experience  Int
  location    String
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  source      String   @default("SELF")
  sourceNote  String?
  salaryType  String   @default("net")
  rangeMax    Int
  rangeMin    Int
  submittedBy String
  voteCount   Int      @default(0)
  workLifeBalance Int?
  compensationSatisfaction Int?
  salarySatisfaction Int?
  user        User     @relation(fields: [userId], references: [id])
  votes       Vote[]
  startDate   DateTime?
  endDate     DateTime?
  isCurrent   Boolean   @default(true)
}

model Vote {
  id        String   @id @default(cuid())
  value     Int
  userId    String
  salaryId  String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  salary    Salary   @relation(fields: [salaryId], references: [id])

  @@unique([userId, salaryId])
}

model ContactMessage {
  id        String   @id @default(cuid())
  name      String
  email     String
  subject   String
  message   String   @db.Text
  status    ContactMessageStatus @default(UNREAD)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("contact_messages")
}

model AnonymousMessage {
  id        String   @id @default(cuid())
  userId    String
  subject   String
  message   String   @db.Text
  answer    String?  @db.Text
  status    ContactMessageStatus @default(UNREAD)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@map("anonymous_messages")
}

enum Role {
  USER
  ADMIN
}

enum ContactMessageStatus {
  UNREAD
  READ
  REPLIED
  ARCHIVED

  @@map("contact_message_status")
}
